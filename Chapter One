#complement.pl
#!/usr/local/bin/perl
# a script for generating the complementary strand
$dna = 'GCAATGG';
$rev = reverse($dna);
$rev =~ tr/ATCG/TAGC/;
print "$rev\n";

#RNA.pl
#!/usr/local/bin/perl
# a script for generating the RNA strand
$dna = 'GCAATGG';
print "The DNA sequence is $dna\n";
$rna = $dna;
$rna =~ tr/T/U/;
print "and the RNA sequence is $rna\n";

#translation.pl
#!/usr/local/bin/perl
# a script to convert codons to amino acids
%code = (
'GCU' => 'A', 'GCC' => 'A', 'GCA' => 'A', 'GCG' => 'A', 'UUA' => 'L',
'UUG' => 'L', 'CUU' => 'L', 'CUC' => 'L', 'CUA' => 'L', 'CUG' => 'L',
'CGU' => 'R', 'CGC' => 'R', 'CGA' => 'R', 'CGG' => 'R', 'AGA' => 'R',
'AGG' => 'R', 'AAA' => 'K', 'AAG' => 'K', 'AAU' => 'N', 'AAC' => 'N',
'AUG' => 'M', 'GAU' => 'D', 'GAC' => 'D', 'UUU' => 'F', 'UUC' => 'F',
'UGU' => 'C', 'UGC' => 'C', 'CCU' => 'P', 'CCC' => 'P', 'CCA' => 'P',
'CCG' => 'P', 'CAA' => 'Q', 'CAG' => 'Q', 'UCU' => 'S', 'UCC' => 'S',
'UCA' => 'S', 'UCG' => 'S', 'AGU' => 'S', 'AGC' => 'S', 'GAA' => 'E',
'GAG' => 'E', 'ACU' => 'T', 'ACC' => 'T', 'ACA' => 'T', 'ACG' => 'T',
'GGU' => 'G', 'GGC' => 'G', 'GGA' => 'G', 'GGG' => 'G', 'UGG' => 'W',
'CAU' => 'H', 'CAC' => 'H', 'UAU' => 'Y', 'UAC' => 'Y', 'AUU' => 'I',
'AUC' => 'I', 'AUA' => 'I', 'GUU' => 'V', 'GUC' => 'V', 'GUA' => 'V',
'GTG' => 'V'
);
$dnaseq = 'GAACTGGGT';
print "$dnaseq\n";
$rnaseq = $dnaseq;
$rnaseq =~ tr/T/U/;
print "$rnaseq\n";

for ($i = 0; $i < length($rnaseq) - 2; $i = $i + 3){
  $codon = substr($rnaseq, $i, 3);
  $amino_acid = $code{$codon};
  print "$amino_acid\n";
}
print "\n";

#Exercise 1.1
# generate reverse complement with strand-direction format
#newcomple.pl
#!/usr/local/bin/perl
$dna = 'GAACTGGGT';
print "5' $dna\ 3' \n";
$rev = reverse($dna);
$rev =~ tr/ACGT/TGCA/;
$compl =reverse($rev);
print "3' $compl\ 5'\n";

#Exercise 1.2 Modify 1.1 to translate the complementary strand
#!/usr/local/bin/perl
#explicitly show strand and its complement
$dna = 'GAACTGGGT';
print "5' $dna\ 3' \n";
$rev = reverse($dna);
$rev =~ tr/ACGT/TGCA/;
$compl =reverse($rev);
print "3' $compl\ 5'\n";
%code = (
'GCU' => 'A', 'GCC' => 'A', 'GCA' => 'A', 'GCG' => 'A', 'UUA' => 'L',
'UUG' => 'L', 'CUU' => 'L', 'CUC' => 'L', 'CUA' => 'L', 'CUG' => 'L',
'CGU' => 'R', 'CGC' => 'R', 'CGA' => 'R', 'CGG' => 'R', 'AGA' => 'R',
'AGG' => 'R', 'AAA' => 'K', 'AAG' => 'K', 'AAU' => 'N', 'AAC' => 'N',
'AUG' => 'M', 'GAU' => 'D', 'GAC' => 'D', 'UUU' => 'F', 'UUC' => 'F',
'UGU' => 'C', 'UGC' => 'C', 'CCU' => 'P', 'CCC' => 'P', 'CCA' => 'P',
'CCG' => 'P', 'CAA' => 'Q', 'CAG' => 'Q', 'UCU' => 'S', 'UCC' => 'S',
'UCA' => 'S', 'UCG' => 'S', 'AGU' => 'S', 'AGC' => 'S', 'GAA' => 'E',
'GAG' => 'E', 'ACU' => 'T', 'ACC' => 'T', 'ACA' => 'T', 'ACG' => 'T',
'GGU' => 'G', 'GGC' => 'G', 'GGA' => 'G', 'GGG' => 'G', 'UGG' => 'W',
'CAU' => 'H', 'CAC' => 'H', 'UAU' => 'Y', 'UAC' => 'Y', 'AUU' => 'I',
'AUC' => 'I', 'AUA' => 'I', 'GUU' => 'V', 'GUC' => 'V', 'GUA' => 'V',
'GTG' => 'V'
);

$rnaseq=$compl;
$rnaseq=~tr/T/U/;

for ($i=0; $i < length($rnaseq) -2; $i = $i + 3){
	$codon=substr($rnaseq, $i, 3);
	$amino_acid=$code{$codon};
	print "$amino_acid";
}
print "\n";

#Exercise 1.3 Modify 1.1 to generate all three reading frames from original strand.
#!/usr/local/bin/perl
#explicitly show strand and its complement
$dna = 'GAACTGGGT';
print "5' $dna\ 3' \n";
$rev = reverse($dna);
$rev =~ tr/ACGT/TGCA/;
$compl =reverse($rev);
print "3' $compl\ 5'\n";
%code = (
'GCU' => 'A', 'GCC' => 'A', 'GCA' => 'A', 'GCG' => 'A', 'UUA' => 'L',
'UUG' => 'L', 'CUU' => 'L', 'CUC' => 'L', 'CUA' => 'L', 'CUG' => 'L',
'CGU' => 'R', 'CGC' => 'R', 'CGA' => 'R', 'CGG' => 'R', 'AGA' => 'R',
'AGG' => 'R', 'AAA' => 'K', 'AAG' => 'K', 'AAU' => 'N', 'AAC' => 'N',
'AUG' => 'M', 'GAU' => 'D', 'GAC' => 'D', 'UUU' => 'F', 'UUC' => 'F',
'UGU' => 'C', 'UGC' => 'C', 'CCU' => 'P', 'CCC' => 'P', 'CCA' => 'P',
'CCG' => 'P', 'CAA' => 'Q', 'CAG' => 'Q', 'UCU' => 'S', 'UCC' => 'S',
'UCA' => 'S', 'UCG' => 'S', 'AGU' => 'S', 'AGC' => 'S', 'GAA' => 'E',
'GAG' => 'E', 'ACU' => 'T', 'ACC' => 'T', 'ACA' => 'T', 'ACG' => 'T',
'GGU' => 'G', 'GGC' => 'G', 'GGA' => 'G', 'GGG' => 'G', 'UGG' => 'W',
'CAU' => 'H', 'CAC' => 'H', 'UAU' => 'Y', 'UAC' => 'Y', 'AUU' => 'I',
'AUC' => 'I', 'AUA' => 'I', 'GUU' => 'V', 'GUC' => 'V', 'GUA' => 'V',
'GTG' => 'V'
);

$rnaseq=$dna;
$rnaseq=~tr/T/U/;

for ($i=0; $i < length($rnaseq) -2; $i = $i + 3){
	$codon=substr($rnaseq, $i, 3);
	$amino_acid=$code{$codon};
	print "$amino_acid";
}
print "\n"
;
for ($i=1; $i < length($rnaseq) -2; $i = $i + 3){
	$codon=substr($rnaseq, $i, 3);
	$amino_acid=$code{$codon};
	print "$amino_acid";
}
print "\n"
;
for ($i=2; $i < length($rnaseq) -2; $i = $i + 3){
	$codon=substr($rnaseq, $i, 3);
	$amino_acid=$code{$codon};
	print "$amino_acid";
}
print "\n"
;
